{"version":3,"file":"consts.CS_TsyL6.js","sources":["../../src/utils/utils.ts","../../src/utils/permalinks.ts","../../node_modules/.pnpm/@astrojs+internal-helpers@0.7.1/node_modules/@astrojs/internal-helpers/dist/path.js","../../node_modules/.pnpm/astro@5.12.8_@types+node@24.2.0_jiti@1.21.7_lightningcss@1.29.3_rollup@4.46.2_terser@5.39.0_typescript@5.9.2_yaml@2.8.0/node_modules/astro/dist/assets/consts.js"],"sourcesContent":["import { I18N } from 'astrowind:config';\n\nexport const formatter: Intl.DateTimeFormat = new Intl.DateTimeFormat(I18N?.language, {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  timeZone: 'UTC',\n});\n\nexport const getFormattedDate = (date: Date): string => (date ? formatter.format(date) : '');\n\nexport const trim = (str = '', ch?: string) => {\n  let start = 0,\n    end = str.length || 0;\n  while (start < end && str[start] === ch) ++start;\n  while (end > start && str[end - 1] === ch) --end;\n  return start > 0 || end < str.length ? str.substring(start, end) : str;\n};\n\n// Function to format a number in thousands (K) or millions (M) format depending on its value\nexport const toUiAmount = (amount: number) => {\n  if (!amount) return 0;\n\n  let value: string;\n\n  if (amount >= 1000000000) {\n    const formattedNumber = (amount / 1000000000).toFixed(1);\n    if (Number(formattedNumber) === parseInt(formattedNumber)) {\n      value = parseInt(formattedNumber) + 'B';\n    } else {\n      value = formattedNumber + 'B';\n    }\n  } else if (amount >= 1000000) {\n    const formattedNumber = (amount / 1000000).toFixed(1);\n    if (Number(formattedNumber) === parseInt(formattedNumber)) {\n      value = parseInt(formattedNumber) + 'M';\n    } else {\n      value = formattedNumber + 'M';\n    }\n  } else if (amount >= 1000) {\n    const formattedNumber = (amount / 1000).toFixed(1);\n    if (Number(formattedNumber) === parseInt(formattedNumber)) {\n      value = parseInt(formattedNumber) + 'K';\n    } else {\n      value = formattedNumber + 'K';\n    }\n  } else {\n    value = Number(amount).toFixed(0);\n  }\n\n  return value;\n};\n","import slugify from 'limax';\n\nimport { SITE, APP_BLOG } from 'astrowind:config';\n\nimport { trim } from '~/utils/utils';\n\nexport const trimSlash = (s: string) => trim(trim(s, '/'));\nconst createPath = (...params: string[]) => {\n  const paths = params\n    .map((el) => trimSlash(el))\n    .filter((el) => !!el)\n    .join('/');\n  return '/' + paths + (SITE.trailingSlash && paths ? '/' : '');\n};\n\nconst BASE_PATHNAME = SITE.base || '/';\n\nexport const cleanSlug = (text = '') =>\n  trimSlash(text)\n    .split('/')\n    .map((slug) => slugify(slug))\n    .join('/');\n\nexport const BLOG_BASE = cleanSlug(APP_BLOG?.list?.pathname);\nexport const CATEGORY_BASE = cleanSlug(APP_BLOG?.category?.pathname);\nexport const TAG_BASE = cleanSlug(APP_BLOG?.tag?.pathname) || 'tag';\n\nexport const POST_PERMALINK_PATTERN = trimSlash(APP_BLOG?.post?.permalink || `${BLOG_BASE}/%slug%`);\n\n/** */\nexport const getCanonical = (path = ''): string | URL => {\n  const url = String(new URL(path, SITE.site));\n  if (SITE.trailingSlash == false && path && url.endsWith('/')) {\n    return url.slice(0, -1);\n  } else if (SITE.trailingSlash == true && path && !url.endsWith('/')) {\n    return url + '/';\n  }\n  return url;\n};\n\n/** */\nexport const getPermalink = (slug = '', type = 'page'): string => {\n  let permalink: string;\n\n  if (\n    slug.startsWith('https://') ||\n    slug.startsWith('http://') ||\n    slug.startsWith('://') ||\n    slug.startsWith('#') ||\n    slug.startsWith('javascript:')\n  ) {\n    return slug;\n  }\n\n  switch (type) {\n    case 'home':\n      permalink = getHomePermalink();\n      break;\n\n    case 'blog':\n      permalink = getBlogPermalink();\n      break;\n\n    case 'asset':\n      permalink = getAsset(slug);\n      break;\n\n    case 'category':\n      permalink = createPath(CATEGORY_BASE, trimSlash(slug));\n      break;\n\n    case 'tag':\n      permalink = createPath(TAG_BASE, trimSlash(slug));\n      break;\n\n    case 'post':\n      permalink = createPath(trimSlash(slug));\n      break;\n\n    case 'page':\n    default:\n      permalink = createPath(slug);\n      break;\n  }\n\n  return definitivePermalink(permalink);\n};\n\n/** */\nexport const getHomePermalink = (): string => getPermalink('/');\n\n/** */\nexport const getBlogPermalink = (): string => getPermalink(BLOG_BASE);\n\n/** */\nexport const getAsset = (path: string): string =>\n  '/' +\n  [BASE_PATHNAME, path]\n    .map((el) => trimSlash(el))\n    .filter((el) => !!el)\n    .join('/');\n\n/** */\nconst definitivePermalink = (permalink: string): string => createPath(BASE_PATHNAME, permalink);\n\n/** */\nexport const applyGetPermalinks = (menu: object = {}) => {\n  if (Array.isArray(menu)) {\n    return menu.map((item) => applyGetPermalinks(item));\n  } else if (typeof menu === 'object' && menu !== null) {\n    const obj = {};\n    for (const key in menu) {\n      if (key === 'href') {\n        if (typeof menu[key] === 'string') {\n          obj[key] = getPermalink(menu[key]);\n        } else if (typeof menu[key] === 'object') {\n          if (menu[key].type === 'home') {\n            obj[key] = getHomePermalink();\n          } else if (menu[key].type === 'blog') {\n            obj[key] = getBlogPermalink();\n          } else if (menu[key].type === 'asset') {\n            obj[key] = getAsset(menu[key].url);\n          } else if (menu[key].url) {\n            obj[key] = getPermalink(menu[key].url, menu[key].type);\n          }\n        }\n      } else {\n        obj[key] = applyGetPermalinks(menu[key]);\n      }\n    }\n    return obj;\n  }\n  return menu;\n};\n","function appendExtension(path, extension) {\n  return path + \".\" + extension;\n}\nfunction appendForwardSlash(path) {\n  return path.endsWith(\"/\") ? path : path + \"/\";\n}\nfunction prependForwardSlash(path) {\n  return path[0] === \"/\" ? path : \"/\" + path;\n}\nfunction collapseDuplicateSlashes(path) {\n  return path.replace(/(?<!:)\\/{2,}/g, \"/\");\n}\nconst MANY_TRAILING_SLASHES = /\\/{2,}$/g;\nfunction collapseDuplicateTrailingSlashes(path, trailingSlash) {\n  if (!path) {\n    return path;\n  }\n  return path.replace(MANY_TRAILING_SLASHES, trailingSlash ? \"/\" : \"\") || \"/\";\n}\nfunction removeTrailingForwardSlash(path) {\n  return path.endsWith(\"/\") ? path.slice(0, path.length - 1) : path;\n}\nfunction removeLeadingForwardSlash(path) {\n  return path.startsWith(\"/\") ? path.substring(1) : path;\n}\nfunction removeLeadingForwardSlashWindows(path) {\n  return path.startsWith(\"/\") && path[2] === \":\" ? path.substring(1) : path;\n}\nfunction trimSlashes(path) {\n  return path.replace(/^\\/|\\/$/g, \"\");\n}\nfunction startsWithForwardSlash(path) {\n  return path[0] === \"/\";\n}\nfunction startsWithDotDotSlash(path) {\n  const c1 = path[0];\n  const c2 = path[1];\n  const c3 = path[2];\n  return c1 === \".\" && c2 === \".\" && c3 === \"/\";\n}\nfunction startsWithDotSlash(path) {\n  const c1 = path[0];\n  const c2 = path[1];\n  return c1 === \".\" && c2 === \"/\";\n}\nfunction isRelativePath(path) {\n  return startsWithDotDotSlash(path) || startsWithDotSlash(path);\n}\nfunction isString(path) {\n  return typeof path === \"string\" || path instanceof String;\n}\nconst INTERNAL_PREFIXES = /* @__PURE__ */ new Set([\"/_\", \"/@\", \"/.\", \"//\"]);\nconst JUST_SLASHES = /^\\/{2,}$/;\nfunction isInternalPath(path) {\n  return INTERNAL_PREFIXES.has(path.slice(0, 2)) && !JUST_SLASHES.test(path);\n}\nfunction joinPaths(...paths) {\n  return paths.filter(isString).map((path, i) => {\n    if (i === 0) {\n      return removeTrailingForwardSlash(path);\n    } else if (i === paths.length - 1) {\n      return removeLeadingForwardSlash(path);\n    } else {\n      return trimSlashes(path);\n    }\n  }).join(\"/\");\n}\nfunction removeFileExtension(path) {\n  let idx = path.lastIndexOf(\".\");\n  return idx === -1 ? path : path.slice(0, idx);\n}\nfunction removeQueryString(path) {\n  const index = path.lastIndexOf(\"?\");\n  return index > 0 ? path.substring(0, index) : path;\n}\nfunction isRemotePath(src) {\n  return /^(?:http|ftp|https|ws):?\\/\\//.test(src) || src.startsWith(\"data:\");\n}\nfunction slash(path) {\n  return path.replace(/\\\\/g, \"/\");\n}\nfunction fileExtension(path) {\n  const ext = path.split(\".\").pop();\n  return ext !== path ? `.${ext}` : \"\";\n}\nfunction removeBase(path, base) {\n  if (path.startsWith(base)) {\n    return path.slice(removeTrailingForwardSlash(base).length);\n  }\n  return path;\n}\nconst WITH_FILE_EXT = /\\/[^/]+\\.\\w+$/;\nfunction hasFileExtension(path) {\n  return WITH_FILE_EXT.test(path);\n}\nexport {\n  MANY_TRAILING_SLASHES,\n  appendExtension,\n  appendForwardSlash,\n  collapseDuplicateSlashes,\n  collapseDuplicateTrailingSlashes,\n  fileExtension,\n  hasFileExtension,\n  isInternalPath,\n  isRelativePath,\n  isRemotePath,\n  joinPaths,\n  prependForwardSlash,\n  removeBase,\n  removeFileExtension,\n  removeLeadingForwardSlash,\n  removeLeadingForwardSlashWindows,\n  removeQueryString,\n  removeTrailingForwardSlash,\n  slash,\n  startsWithDotDotSlash,\n  startsWithDotSlash,\n  startsWithForwardSlash,\n  trimSlashes\n};\n","const VIRTUAL_MODULE_ID = \"astro:assets\";\nconst VIRTUAL_SERVICE_ID = \"virtual:image-service\";\nconst VALID_INPUT_FORMATS = [\n  \"jpeg\",\n  \"jpg\",\n  \"png\",\n  \"tiff\",\n  \"webp\",\n  \"gif\",\n  \"svg\",\n  \"avif\"\n];\nconst VALID_SUPPORTED_FORMATS = [\n  \"jpeg\",\n  \"jpg\",\n  \"png\",\n  \"tiff\",\n  \"webp\",\n  \"gif\",\n  \"svg\",\n  \"avif\"\n];\nconst DEFAULT_OUTPUT_FORMAT = \"webp\";\nconst VALID_OUTPUT_FORMATS = [\"avif\", \"png\", \"webp\", \"jpeg\", \"jpg\", \"svg\"];\nconst DEFAULT_HASH_PROPS = [\n  \"src\",\n  \"width\",\n  \"height\",\n  \"format\",\n  \"quality\",\n  \"fit\",\n  \"position\"\n];\nexport {\n  DEFAULT_HASH_PROPS,\n  DEFAULT_OUTPUT_FORMAT,\n  VALID_INPUT_FORMATS,\n  VALID_OUTPUT_FORMATS,\n  VALID_SUPPORTED_FORMATS,\n  VIRTUAL_MODULE_ID,\n  VIRTUAL_SERVICE_ID\n};\n"],"names":[],"mappings":";;;;;;;;AAEO,MAAM,SAAA,GAAiC,IAAI,IAAA,CAAK,cAAA,CAAe,MAAM,QAAA,EAAU;AAAA,EACpF,IAAA,EAAM,SAAA;AAAA,EACN,KAAA,EAAO,OAAA;AAAA,EACP,GAAA,EAAK,SAAA;AAAA,EACL,QAAA,EAAU;AACZ,CAAC,CAAA;AAEM,MAAM,mBAAmB,CAAC,IAAA,KAAwB,OAAO,SAAA,CAAU,MAAA,CAAO,IAAI,CAAA,GAAI;AAElF,MAAM,IAAA,GAAO,CAAC,GAAA,GAAM,EAAA,EAAI,EAAA,KAAgB;AAC7C,EAAA,IAAI,KAAA,GAAQ,CAAA,EACV,GAAA,GAAM,GAAA,CAAI,MAAA,IAAU,CAAA;AACtB,EAAA,OAAO,QAAQ,GAAA,IAAO,GAAA,CAAI,KAAK,CAAA,KAAM,IAAI,EAAE,KAAA;AAC3C,EAAA,OAAO,MAAM,KAAA,IAAS,GAAA,CAAI,MAAM,CAAC,CAAA,KAAM,IAAI,EAAE,GAAA;AAC7C,EAAA,OAAO,KAAA,GAAQ,KAAK,GAAA,GAAM,GAAA,CAAI,SAAS,GAAA,CAAI,SAAA,CAAU,KAAA,EAAO,GAAG,CAAA,GAAI,GAAA;AACrE,CAAA;;ACXO,MAAM,YAAY,CAAC,CAAA,KAAc,KAAK,IAAA,CAAK,CAAA,EAAG,GAAG,CAAC;AACzD,MAAM,UAAA,GAAa,IAAI,MAAA,KAAqB;AAC1C,EAAA,MAAM,QAAQ,MAAA,CACX,GAAA,CAAI,CAAC,EAAA,KAAO,UAAU,EAAE,CAAC,CAAA,CACzB,MAAA,CAAO,CAAC,EAAA,KAAO,CAAC,CAAC,EAAE,CAAA,CACnB,KAAK,GAAG,CAAA;AACX,EAAA,OAAO,GAAA,GAAM,KAAA,IAA6C,EAAA,CAAA;AAC5D,CAAA;AAEA,MAAM,aAAA,GAAgB,KAAK,IAAQ;AAE5B,MAAM,YAAY,CAAC,IAAA,GAAO,OAC/B,SAAA,CAAU,IAAI,EACX,KAAA,CAAM,GAAG,CAAA,CACT,GAAA,CAAI,CAAC,IAAA,KAAS,OAAA,CAAQ,IAAI,CAAC,CAAA,CAC3B,KAAK,GAAG;AAEN,MAAM,SAAA,GAAY,SAAA,CAAU,QAAA,EAAU,IAAA,EAAM,QAAQ;AACpD,MAAM,aAAA,GAAgB,SAAA,CAAU,QAAA,EAAU,QAAA,EAAU,QAAQ;AAC5D,MAAM,QAAA,GAAW,SAAA,CAAU,QAAA,EAAU,GAAA,EAAK,QAAQ,CAAA,IAAK;AAEvD,MAAM,yBAAyB,SAAA,CAAU,QAAA,EAAU,MAAM,SAAkC;AAG3F,MAAM,YAAA,GAAe,CAAC,IAAA,GAAO,EAAA,KAAqB;AACvD,EAAA,MAAM,MAAM,MAAA,CAAO,IAAI,IAAI,IAAA,EAAM,IAAA,CAAK,IAAI,CAAC,CAAA;AAC3C,EAAA,IAAmC,QAAQ,GAAA,CAAI,QAAA,CAAS,GAAG,CAAA,EAAG;AAC5D,IAAA,OAAO,GAAA,CAAI,KAAA,CAAM,CAAA,EAAG,EAAE,CAAA;AAAA,EACxB;AAGA,EAAA,OAAO,GAAA;AACT;AAGO,MAAM,YAAA,GAAe,CAAC,IAAA,GAAO,EAAA,EAAI,OAAO,MAAA,KAAmB;AAChE,EAAA,IAAI,SAAA;AAEJ,EAAA,IACE,KAAK,UAAA,CAAW,UAAU,KAC1B,IAAA,CAAK,UAAA,CAAW,SAAS,CAAA,IACzB,IAAA,CAAK,WAAW,KAAK,CAAA,IACrB,KAAK,UAAA,CAAW,GAAG,KACnB,IAAA,CAAK,UAAA,CAAW,aAAa,CAAA,EAC7B;AACA,IAAA,OAAO,IAAA;AAAA,EACT;AAEA,EAAA,QAAQ,IAAA;AAAM,IACZ,KAAK,MAAA;AACH,MAAA,SAAA,GAAY,gBAAA,EAAiB;AAC7B,MAAA;AAAA,IAEF,KAAK,MAAA;AACH,MAAA,SAAA,GAAY,gBAAA,EAAiB;AAC7B,MAAA;AAAA,IAEF,KAAK,OAAA;AACH,MAAA,SAAA,GAAY,SAAS,IAAI,CAAA;AACzB,MAAA;AAAA,IAEF,KAAK,UAAA;AACH,MAAA,SAAA,GAAY,UAAA,CAAW,aAAA,EAAe,SAAA,CAAU,IAAI,CAAC,CAAA;AACrD,MAAA;AAAA,IAEF,KAAK,KAAA;AACH,MAAA,SAAA,GAAY,UAAA,CAAW,QAAA,EAAU,SAAA,CAAU,IAAI,CAAC,CAAA;AAChD,MAAA;AAAA,IAEF,KAAK,MAAA;AACH,MAAA,SAAA,GAAY,UAAA,CAAW,SAAA,CAAU,IAAI,CAAC,CAAA;AACtC,MAAA;AAAA,IAEF,KAAK,MAAA;AAAA,IACL;AACE,MAAA,SAAA,GAAY,WAAW,IAAI,CAAA;AAC3B,MAAA;AAAA;AAGJ,EAAA,OAAO,oBAAoB,SAAS,CAAA;AACtC;AAGO,MAAM,gBAAA,GAAmB,MAAc,YAAA,CAAa,GAAG;AAGvD,MAAM,gBAAA,GAAmB,MAAc,YAAA,CAAa,SAAS;AAG7D,MAAM,QAAA,GAAW,CAAC,IAAA,KACvB,GAAA,GACA,CAAC,aAAA,EAAe,IAAI,CAAA,CACjB,GAAA,CAAI,CAAC,EAAA,KAAO,UAAU,EAAE,CAAC,CAAA,CACzB,MAAA,CAAO,CAAC,EAAA,KAAO,CAAC,CAAC,EAAE,CAAA,CACnB,IAAA,CAAK,GAAG;AAGb,MAAM,mBAAA,GAAsB,CAAC,SAAA,KAA8B,UAAA,CAAW,eAAe,SAAS,CAAA;;ACjG9F,SAAS,mBAAmB,CAAC,IAAI,EAAE;AACnC,EAAE,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI;AAC5C;AAWA,SAAS,0BAA0B,CAAC,IAAI,EAAE;AAC1C,EAAE,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;AACnE;AACA,SAAS,yBAAyB,CAAC,IAAI,EAAE;AACzC,EAAE,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;AACxD;AAIA,SAAS,WAAW,CAAC,IAAI,EAAE;AAC3B,EAAE,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;AACrC;AAkBA,SAAS,QAAQ,CAAC,IAAI,EAAE;AACxB,EAAE,OAAO,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,YAAY,MAAM;AAC3D;AAMA,SAAS,SAAS,CAAC,GAAG,KAAK,EAAE;AAC7B,EAAE,OAAO,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK;AACjD,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;AACjB,MAAM,OAAO,0BAA0B,CAAC,IAAI,CAAC;AAC7C,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;AACvC,MAAM,OAAO,yBAAyB,CAAC,IAAI,CAAC;AAC5C,IAAI,CAAC,MAAM;AACX,MAAM,OAAO,WAAW,CAAC,IAAI,CAAC;AAC9B,IAAI;AACJ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;AACd;AASA,SAAS,YAAY,CAAC,GAAG,EAAE;AAC3B,EAAE,OAAO,8BAA8B,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC;AAC5E;AAQA,SAAS,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE;AAChC,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;AAC7B,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;AAC9D,EAAE;AACF,EAAE,OAAO,IAAI;AACb;;ACxFK,MAAC,mBAAmB,GAAG;AAC5B,EAAE,MAAM;AACR,EAAE,KAAK;AACP,EAAE,KAAK;AACP,EAAE,MAAM;AACR,EAAE,MAAM;AACR,EAAE,KAAK;AACP,EAAE,KAAK;AACP,EAAE;AACF;AACK,MAAC,uBAAuB,GAAG;AAChC,EAAE,MAAM;AACR,EAAE,KAAK;AACP,EAAE,KAAK;AACP,EAAE,MAAM;AACR,EAAE,MAAM;AACR,EAAE,KAAK;AACP,EAAE,KAAK;AACP,EAAE;AACF;AACK,MAAC,qBAAqB,GAAG;AAEzB,MAAC,kBAAkB,GAAG;AAC3B,EAAE,KAAK;AACP,EAAE,OAAO;AACT,EAAE,QAAQ;AACV,EAAE,QAAQ;AACV,EAAE,SAAS;AACX,EAAE,KAAK;AACP,EAAE;AACF;;;;","x_google_ignoreList":[2,3]}