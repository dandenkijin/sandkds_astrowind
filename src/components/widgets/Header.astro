---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash, getAsset } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    'relative py-3 px-3 lg:px-6 mx-auto w-full transition-colors duration-300',
    { 'fixed top-0 left-0 right-0 z-50': isSticky },
    { 'bg-white/90 dark:bg-slate-900/90 backdrop-blur-sm': isSticky },
    { 'bg-white/80 dark:bg-slate-900/80': isSticky },
    { 'text-gray-900 dark:text-white': true }
  ]}
  aria-label="Main navigation"
  data-astro-transition-persist="header"
>
  <div class="absolute inset-0"></div>
  <div class:list={[
    'relative text-default py-3 px-3 lg:px-6 mx-auto w-full',
    { 'max-w-7xl': !isFullWidth }
  ]}>
    <div class:list={[
      'flex justify-between items-center',
      { 'lg:grid lg:grid-cols-3 lg:items-center': position === 'center' }
    ]}>
      <a class="flex-1 min-w-0" href={getHomePermalink()}>
        <div class="text-lg font-bold leading-tight break-words max-w-[80%]">
          <Logo />
        </div>
      </a>
      <div class="lg:hidden">
        <ToggleMenu />
      </div>
      
      {/* Mobile Menu Overlay */}
      <div class="lg:hidden fixed inset-0 z-40 bg-black/50 backdrop-blur-sm transition-opacity duration-300 opacity-0 invisible" id="mobile-menu-overlay"></div>
      
      {/* Mobile Menu */}
      <div class="lg:hidden fixed inset-y-0 right-0 z-50 w-full max-w-s bg-white dark:bg-gray-900 shadow-xl transform transition-transform duration-300 translate-x-full" id="mobile-menu">
        <div class="flex flex-col h-full overflow-y-auto">
          <div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <a class="text-xl font-bold" href={getHomePermalink()}>
              <Logo />
            </a>
            <button type="button" class="p-2 -mr-2" onclick="document.querySelector('[data-aw-toggle-menu]').click()">
              <Icon name="tabler:x" class="w-6 h-6" />
            </button>
          </div>
          
          <nav class="flex-1 p-4 space-y-2">
            {links.map(({ text, href, links: subLinks }) => (
              <div class="mb-2">
                {subLinks?.length ? (
                  <div class="space-y-2">
                    <div class="font-medium text-gray-900 dark:text-white px-3 py-2">
                      {text}
                    </div>
                    <div class="pl-4 space-y-1">
                      {subLinks.map(({ text: text2, href: href2 }) => (
                        <a
                          href={href2}
                          class:list={[
                            'block px-3 py-2 rounded-md text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800',
                            { 'bg-gray-100 dark:bg-gray-800': href2 === currentPath }
                          ]}
                        >
                          {text2}
                        </a>
                      ))}
                    </div>
                  </div>
                ) : (
                  <a
                    href={href}
                    class:list={[
                      'block px-3 py-2 rounded-md font-medium',
                      href === currentPath
                        ? 'text-primary-600 dark:text-primary-400 bg-primary-50 dark:bg-gray-800'
                        : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800'
                    ]}
                  >
                    {text}
                  </a>
                )}
              </div>
            ))}
          </nav>
          
          {actions.length > 0 && (
            <div class="p-4 border-t border-gray-200 dark:border-gray-700">
              <div class="flex flex-col space-y-2">
                {actions.map((action, index) => (
                  <a
                    href={action.href}
                    class:list={[
                      'btn',
                      action.variant === 'primary' ? 'btn-primary' : 'btn-ghost',
                      'w-full text-center',
                      action.classes
                    ]}
                    aria-label={action['aria-label']}
                  >
                    {action.text}
                    {action.icon && (
                      <Icon name={action.icon} class="w-4 h-4 ml-1 -mr-1" />
                    )}
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
      {/* Desktop Navigation */}
      <nav class="hidden lg:block" aria-label="Main navigation">
        <ul class="flex flex-row items-center justify-end space-x-6">
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown group' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                  >
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline transition-transform group-hover:rotate-180" />
                  </button>
                  <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:opacity-0 md:invisible md:group-hover:opacity-100 md:group-hover:visible transition-all duration-200 font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl z-50">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-nowrap',
                            { 'aw-link-active': href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end',
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="ml-2 py-2.5 px-5.5 md:px-6 font-semibold shadow-none text-sm w-auto" />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>
