---
import '~/assets/styles/tailwind.css';
import { I18N } from 'astrowind:config';

import CommonMeta from '~/components/common/CommonMeta.astro';
import Favicons from '~/components/Favicons.astro';
import CustomStyles from '~/components/CustomStyles.astro';
import ApplyColorMode from '~/components/common/ApplyColorMode.astro';
import Metadata from '~/components/common/Metadata.astro';
import SiteVerification from '~/components/common/SiteVerification.astro';
import Analytics from '~/components/common/Analytics.astro';
import BasicScripts from '~/components/common/BasicScripts.astro';

// Comment the line below to disable View Transitions
import { ClientRouter } from 'astro:transitions';

import type { MetaData as MetaDataType } from '~/types';

export interface Script {
  src: string;
  type?: string;
  async?: boolean;
  defer?: boolean;
}

export interface Props {
  metadata?: MetaDataType;
  scripts?: Script[];
}

const { metadata = {}, scripts = [] } = Astro.props;
const { language, textDirection } = I18N;
---

<!doctype html>
<html lang={language} dir={textDirection} class="2xl:text-[20px]">
  <head>
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cormorant+Garamond:ital,wght@0,300..700;1,300..700&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Dancing+Script:wght@400..700&display=swap" rel="stylesheet">
    
    <CommonMeta />
    <Favicons />
    <CustomStyles />
    <ApplyColorMode />
    <Metadata {...metadata} />
    <SiteVerification />
    <Analytics />

    <!-- Scripts -->
    {scripts.map((script) => (
      <script 
        src={script.src} 
        type={script.type || 'application/javascript'}
        async={script.async}
        defer={script.defer}
      />
    ))}

    <!-- Comment the line below to disable View Transitions -->
    <ClientRouter fallback="swap" />
  </head>

  <body class="antialiased text-default bg-page tracking-tight">
    <slot />

    <!-- Simple Spinner Overlay -->
    <div id="page-spinner-overlay" class="fixed inset-0 z-[9999] bg-white/70 dark:bg-slate-900/70 backdrop-blur flex items-center justify-center hidden">
      <div class="w-12 h-12 border-4 border-t-primary-500 border-r-primary-500 border-b-transparent border-l-transparent rounded-full animate-spin"></div>
    </div>
    <script>
      let spinnerTimeout;
      const SPINNER_TIMEOUT_MS = 4000; // 4 second timeout

      // Ensure spinner is hidden by default on initial load
      document.addEventListener('DOMContentLoaded', () => {
        const overlay = document.getElementById('page-spinner-overlay');
        if (overlay) overlay.classList.add('hidden');
      });

      function showSpinner() {
        const overlay = document.getElementById('page-spinner-overlay');
        if (overlay) {
          // Clear any existing timeout
          if (spinnerTimeout) clearTimeout(spinnerTimeout);
          // Set new timeout to hide spinner after 4 seconds
          spinnerTimeout = setTimeout(() => {
            // Check if we're on a hash URL and the target exists
            if (window.location.hash) {
              const target = document.querySelector(window.location.hash);
              if (target) {
                // If target exists, ensure it's in view
                target.scrollIntoView();
                hideSpinner();
                return;
              }
            }
            // If no hash or target not found, hide spinner anyway
            hideSpinner();
          }, SPINNER_TIMEOUT_MS);
          
          overlay.classList.remove('hidden');
        }
      }

      function hideSpinner() {
        if (spinnerTimeout) clearTimeout(spinnerTimeout);
        const overlay = document.getElementById('page-spinner-overlay');
        if (overlay) overlay.classList.add('hidden');
      }

      function handlePageLoad() {
        // Check for hash navigation
        if (window.location.hash) {
          const target = document.querySelector(window.location.hash);
          if (target) {
            target.scrollIntoView();
          }
        }
        hideSpinner();
      }

      // Hide spinner when page is fully loaded
      window.addEventListener('load', handlePageLoad);
      document.addEventListener('astro:after-swap', handlePageLoad);
      document.addEventListener('astro:page-load', handlePageLoad);

      // Show spinner during navigation
      if ('navigation' in window) {
        // @ts-ignore
        window.navigation.addEventListener('navigate', (event) => {
          // Only show spinner for same-origin navigations
          if (new URL(event.destination.url).origin === window.location.origin) {
            showSpinner();
          }
        });
        // @ts-ignore
        window.navigation.addEventListener('navigatesuccess', handlePageLoad);
        // @ts-ignore
        window.navigation.addEventListener('navigateerror', hideSpinner);
      } else {
        window.addEventListener('popstate', showSpinner);
        window.addEventListener('hashchange', handlePageLoad);
        document.addEventListener('astro:page-load', handlePageLoad);
      }

      // Handle link clicks
      document.body.addEventListener('click', (e) => {
        const target = e.target as HTMLElement | null;
        if (target && typeof target.closest === 'function') {
          const a = target.closest('a');
          if (a && a.href && a.origin === window.location.origin && !a.hasAttribute('target')) {
            showSpinner();
          }
        }
      });

      // Initial hide
      hideSpinner();
    </script>
    <BasicScripts />
  </body>
</html>
