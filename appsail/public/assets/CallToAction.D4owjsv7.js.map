{"version":3,"file":"CallToAction.D4owjsv7.js","sources":["../../src/components/widgets/CallToAction.astro"],"sourcesContent":["---\nimport WidgetWrapper from '~/components/ui/WidgetWrapper.astro';\nimport type { Widget } from '~/types';\nimport Headline from '~/components/ui/Headline.astro';\nimport Button from '~/components/ui/Button.astro';\nimport type { CallToAction as ButtonProps } from '~/types';\nimport careItemsImage from '~/assets/images/care_items_robe_slippers.png';\n\n// Define a more specific CallToAction type\ntype ActionProps = Omit<ButtonProps, 'class'> & {\n  class?: string;\n};\n\ninterface Props extends Omit<Widget, 'classes'> {\n  title?: string;\n  subtitle?: string;\n  tagline?: string;\n  callToAction?: ActionProps;\n  actions?: string | ActionProps[];\n  classes?: {\n    container?: string;\n    headline?: {\n      container?: string;\n      title?: string;\n      subtitle?: string;\n      tagline?: string;\n    };\n  };\n  image?: {\n    src: string;\n    alt: string;\n    position?: 'left' | 'right';\n    width?: number;\n    height?: number;\n  };\n}\n\n// Get the actions from props with proper type handling\nconst actions = 'actions' in Astro.props ? Astro.props.actions : [];\nconst {\n  title = await Astro.slots.render('title'),\n  subtitle = await Astro.slots.render('subtitle'),\n  tagline = await Astro.slots.render('tagline'),\n  // Remove actions from destructuring to prevent type issues\n  // New image prop\n  image,\n  id,\n  isDark = false,\n  classes = { container: '' },\n  bg = await Astro.slots.render('bg'),\n} = Astro.props as Omit<Props, 'actions'>;\n\n// Set default image position if not provided\nconst imagePosition = image?.position || 'right'; // 'left' or 'right'\n---\n\n<WidgetWrapper \n  id={id} \n  isDark={isDark} \n  containerClass={`max-w-6xl mx-auto ${classes.container || ''}`} \n  bg={bg}\n>\n  <div class=\"flex flex-col md:flex-row items-center gap-8 p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600\">\n    {/* Care Items Image on Left */}\n    <div class=\"w-full md:w-2/5 flex justify-center items-center\">\n      <img \n        src={careItemsImage.src} \n        alt=\"Care items including robe and slippers\" \n        class=\"max-h-[120%] w-auto object-contain\"\n        loading=\"lazy\"\n      />\n    </div>\n    \n    <div class={`${image ? 'w-full md:w-1/2' : 'w-full max-w-3xl mx-auto text-center'}`}>\n      <Headline\n        title={title}\n        subtitle={subtitle}\n        tagline={tagline}\n        classes={{\n          container: 'mb-0 md:mb-0 ' + (classes?.container || ''),\n          title: 'text-4xl md:text-4xl font-bold tracking-tighter mb-4 font-heading',\n          subtitle: 'text-xl text-muted dark:text-slate-400',\n          ...(classes?.headline || {})\n        }}\n      />\n      {\n        actions && (\n          <div class=\"max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 mt-6\">\n            {Array.isArray(actions) ? (\n              actions.map((action, index) => {\n                if (!action) return null;\n                \n                // Safely extract properties with type assertion\n                const actionProps = action as ActionProps;\n                const className = 'class' in actionProps ? actionProps.class : '';\n                \n                // Create a unique key for the button\n                const uniqueKey = `action-${index}-${actionProps.text || ''}`.replace(/\\s+/g, '-');\n                \n                // Create a button element with explicit props\n                const button = (\n                  <Button\n                    text={actionProps.text}\n                    href={actionProps.href}\n                    target={actionProps.target}\n                    variant={actionProps.variant}\n                    icon={actionProps.icon}\n                    rel={actionProps.rel}\n                    data-astro-prefetch={actionProps['data-astro-prefetch']}\n                    class={`w-full sm:mb-0 ${className || ''}`}\n                  />\n                );\n                \n                // Return the button wrapped in a div with the key\n                return {\n                  [uniqueKey]: <div class=\"flex w-full sm:w-auto\">{button}</div>\n                }[uniqueKey];\n              })\n            ) : typeof actions === 'string' ? (\n              <Fragment set:html={actions} />\n            ) : null}\n          </div>\n        )\n      }\n    </div>\n    \n    {image && imagePosition === 'right' && (\n      <div class=\"w-full md:w-1/2\">\n        <img \n          src={image.src} \n          alt={image.alt || ''} \n          class=\"w-full h-auto rounded-lg object-cover\"\n          width={image.width}\n          height={image.height}\n          loading=\"lazy\"\n        />\n      </div>\n    )}\n  </div>\n</WidgetWrapper>\n"],"names":["$$createAstro","$$createComponent","Astro","$$render","$$renderComponent","WidgetWrapper","$$result","$$maybeRenderHead","$$addAttribute","Headline","Button","$$unescapeHTML"],"mappings":"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"}