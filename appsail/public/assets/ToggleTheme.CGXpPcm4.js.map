{"version":3,"file":"ToggleTheme.CGXpPcm4.js","sources":["../../node_modules/.pnpm/astro-icon@1.1.5/node_modules/astro-icon/components/cache.ts","../../node_modules/.pnpm/astro-icon@1.1.5/node_modules/astro-icon/components/Icon.astro","../../src/components/common/ToggleTheme.astro"],"sourcesContent":["export const cache = new WeakMap<Request, Map<string, number>>();\n","---\n// @ts-ignore virtual module\nimport icons, { config } from \"virtual:astro-icon\";\n// @ts-ignore generated by typegen\nimport type { Icon } from \"virtual:astro-icon\";\nimport { getIconData, iconToSVG } from \"@iconify/utils\";\nimport type { HTMLAttributes } from \"astro/types\";\nimport { cache } from \"./cache.js\";\nimport type { IconifyIconBuildResult } from \"@iconify/utils/lib/svg/build.js\";\n\ninterface Props extends HTMLAttributes<\"svg\"> {\n  name: Icon;\n  \"is:inline\"?: boolean;\n  title?: string;\n  desc?: string;\n  size?: number | string;\n  width?: number | string;\n  height?: number | string;\n}\n\nclass AstroIconError extends Error {\n  public hint: string = '';\n\n  constructor(message: string) {\n    super(message);\n  }\n}\n\nconst req = Astro.request;\nconst { name = \"\", title, desc, \"is:inline\": inline = false, ...props } = Astro.props;\nconst map = cache.get(req) ?? new Map();\nconst i = map.get(name) ?? 0;\nmap.set(name, i + 1);\ncache.set(req, map);\n\nconst { include = {} } = config;\nconst sets = Object.keys(include);\n\nconst includeSymbol = !inline && i === 0;\n\nlet [setName, iconName] = (name as string).split(\":\");\n\nif (!setName && iconName) {\n  const err = new AstroIconError(`Invalid \"name\" provided!`);\n  if (import.meta.env.DEV) {\n    err.hint = `The provided value of \"${name}\" is invalid.\\n\\nDid you forget the icon set name? If you were attemping to reference a local icon, use the icon's name directly. (ie. \"${iconName}\")`;\n  }\n  throw err;\n}\n\n// No iconName, assume local icon reference\nif (!iconName) {\n  // Assign the provided setName to the iconName\n  iconName = setName;\n  setName = \"local\";\n\n  // Check if the local icon set exists\n  if (!icons[setName]) {\n    const err = new AstroIconError('Unable to load the \"local\" icon set!');\n    if (import.meta.env.DEV) {\n      err.hint =\n        'It looks like the \"local\" set was not loaded.\\n\\nDid you forget to create the icon directory or to update your config?';\n    }\n    throw err;\n  }\n\n  // Check if the icon is missing from the local collection\n  if (!(iconName in icons[setName].icons)) {\n    const err = new AstroIconError(`Unable to locate \"${name}\" icon!`);\n    if (import.meta.env.DEV) {\n      err.hint = `The icon named \"${iconName}\" was not found in your local icon directory.\\n\\nDid you forget to configure your icon directory or make a typo?`;\n    }\n    throw err;\n  }\n}\n\nconst collection = icons[setName];\n\n// Iconify collection not configured correctly\nif (!collection) {\n  const err = new AstroIconError(`Unable to locate the \"${setName}\" icon set!`);\n  if (import.meta.env.DEV) {\n    if (sets.includes(setName)) {\n      err.hint = `It looks like the \"${setName}\" set was not loaded.\\n\\nDid you install the \"@iconify-json/${setName}\" dependency?`;\n    } else {\n      err.hint = `It looks like the \"${setName}\" set is not included in your configuration.\\n\\nDo you need to add the \"${setName}\" set?`;\n    }\n  }\n  throw err;\n}\n\nconst iconData = getIconData(collection, iconName ?? setName);\n// Missing icon from the icon collection\nif (!iconData) {\n  const err = new AstroIconError(`Unable to locate \"${name}\" icon!`);\n  if (import.meta.env.DEV) {\n    const [maybeStar] = include[setName];\n    if (maybeStar === \"*\" || include[setName].includes(iconName)) {\n      err.hint = `The \"${setName}\" set does not include an icon named \"${iconName}\".\\n\\nIs this a typo?`;\n    } else {\n      err.hint = `The \"${setName}\" set is not configured to include an icon named \"${iconName}\".\\n\\nDo you need to add it to your configuration?`;\n    }\n  }\n  throw err;\n}\n\nconst id = `ai:${collection.prefix}:${iconName ?? setName}`;\n\nif (props.size) {\n  props.width = props.size;\n  props.height = props.size;\n  delete props.size;\n}\nconst renderData = iconToSVG(iconData);\nconst normalizedProps = { ...renderData.attributes as Partial<IconifyIconBuildResult['attributes']>, ...props };\nconst normalizedBody = renderData.body;\n\nconst { viewBox } = normalizedProps;\nif (includeSymbol) {\n  delete normalizedProps.viewBox;\n}\n---\n\n<svg {...normalizedProps} data-icon={name}>\n  {title && <title>{title}</title>}\n  {desc && <desc>{desc}</desc>}\n  {\n    inline ? (\n      <Fragment id={id} set:html={normalizedBody} />\n    ) : (\n      <Fragment>\n        {includeSymbol && <symbol id={id} viewBox={viewBox} set:html={normalizedBody} />}\n        <use href={`#${id}`} />\n      </Fragment>\n    )\n  }\n</svg>\n","---\nimport { Icon } from 'astro-icon/components';\nimport { UI } from 'astrowind:config';\n\nexport interface Props {\n  label?: string;\n  class?: string;\n  iconClass?: string;\n}\n\nconst {\n  label = 'Toggle between Dark and Light mode',\n  class: className = 'text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center',\n  iconClass = 'w-6 h-6',\n} = Astro.props;\n---\n\n{\n  !(UI.theme && UI.theme.endsWith(':only')) && (\n    <button\n      type=\"button\"\n      class={className}\n      aria-label={label}\n      onclick=\"\n        const root = document.documentElement;\n        const isDark = root.classList.contains('dark');\n        \n        if (isDark) {\n          root.classList.remove('dark');\n          localStorage.theme = 'light';\n          this.querySelector('svg').setAttribute('name', 'tabler:moon');\n        } else {\n          root.classList.add('dark');\n          localStorage.theme = 'dark';\n          this.querySelector('svg').setAttribute('name', 'tabler:sun');\n        }\n      \"\n    >\n      <Icon name=\"tabler:moon\" class={iconClass} />\n      <script is:inline>\n        // Initialize icon on page load\n        document.addEventListener('DOMContentLoaded', () => {\n          const root = document.documentElement;\n          const isDark = root.classList.contains('dark');\n          const icons = document.querySelectorAll('[aria-label=\"Toggle between Dark and Light mode\"] svg');\n          icons.forEach(icon => {\n            icon.setAttribute('name', isDark ? 'tabler:sun' : 'tabler:moon');\n          });\n        });\n      </script>\n    </button>\n  )\n}\n"],"names":["$$Astro","$$createAstro","$$createComponent","Astro","$$render","$$maybeRenderHead","$$spreadAttributes","$$addAttribute","$$renderComponent","$$result","$$unescapeHTML","Icon"],"mappings":"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","x_google_ignoreList":[0,1]}